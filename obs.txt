create a same table for my code.
here is my observation:
pos , orn = p.getBasePositionAndOrientation(self.robotiqUid)
ornEuler = p.getEulerFromQuaternion(orn)
linvel, angvel = np.array(p.getBaseVelocity(self.robotiqUid))
observation = np.array([pos[0], pos[1], pos[2],ornEuler[0], ornEuler[1], ornEuler[2],linvel[0], linvel[1], linvel[2],angvel[0], angvel[1], angvel[2]],dtype=np.float32)
self._observation = observation
gripperPos , gripperOrn = p.getBasePositionAndOrientation(self._robotiq.robotiqUid)
griplinvel, gripangvel = p.getBaseVelocity(self._robotiq.robotiqUid)
blockPos, blockOri = p.getBasePositionAndOrientation(self.blockUid)
blocklinVel, blockangVel = p.getBaseVelocity(self.blockUid)
blockEul = p.getEulerFromQuaternion(blockOri)
gripEul = p.getEulerFromQuaternion(gripperOrn)
blockPose = np.array([blockPos[0], blockPos[1], blockPos[2], blockEul[0], blockEul[1], blockEul[2]], dtype=np.float32)
blockPosequat = np.array([blockPos[0], blockPos[1], blockPos[2],blockOri[0], blockOri[1], blockOri[2], blockOri[3]], dtype=np.float32)
self._observation = np.append(self._observation, blockPose)
relPose = np.array([blockPos[0]-gripperPos[0], blockPos[1]-gripperPos[1], blockPos[2]-gripperPos[2],blockEul[0]-gripEul[0], blockEul[1]-gripEul[1], blockEul[2]-gripEul[2]], dtype=np.float32)
relPosequat = np.array([blockPos[0]-gripperPos[0], blockPos[1]-gripperPos[1], blockPos[2]-gripperPos[2],blockOri[0]-gripperOrn[0], blockOri[1]-gripperOrn[1], blockOri[2]-gripperOrn[2], blockOri[3]-gripperOrn[3]], dtype=np.float32)
self._observation = np.append(self._observation, relPose)
blockVel = np.array([blocklinVel[0], blocklinVel[1], blocklinVel[2], blockangVel[0], blockangVel[1], blockangVel[2]], dtype=np.float32)
self._observation = np.append(self._observation, blockVel)
relVel = np.array([blocklinVel[0]-griplinvel[0], blocklinVel[1]-griplinvel[1], blocklinVel[2]-griplinvel[2],blockangVel[0]-gripangvel[0], blockangVel[1]-gripangvel[1], blockangVel[2]-gripangvel[2]], dtype=np.float32)
self._observation = np.append(self._observation, relVel)
closestpoint = p.getClosestPoints(self._robotiq.robotiqUid, self.blockUid, 100, -1, -1)
point1 = np.array(closestpoint[0][5], dtype=np.float32)
point2 = np.array(closestpoint[0][6], dtype=np.float32)
minpos = np.subtract(point1, point2)
self._observation = np.append(self._observation, minpos)
totalforce = self._contactinfo()[4]
self._observation = np.append(self._observation, totalforce)